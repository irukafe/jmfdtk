"""Module to generate coding files and compound word list file of KH Coder from J-MFD.

KH Coder: https://github.com/ko-ichi-h/khcoder

khcodegen.generate_khcode applys morphological analysis to each word in J-MFD and some fo them
are divided into multiple tokens. Those words will be added to a compound list file.

Note: You need to use MeCab with IPAdic in KH Coder when using files generated by this module.
"""
import MeCab
import ipadic

from jmfdtk import JMFD_PATH
from jmfdtk.jmfdloader import load_jmfd

# Default path of KH Coder coding file based on moral foundaion.
CODE_JMF_PATH = './code_jmf.txt'

# Default path of KH Coder coding file based on moral foundaion word.
CODE_JMFW_PATH = './code_jmfw.txt'

# Default path of KH Coder file storing compound word list.
COMPOUND_JMF_PATH = './compound_jmf.txt'


def _segment(df):
    tagger = MeCab.Tagger(ipadic.MECAB_ARGS)
    tagger.parse('')

    words = df['word'].tolist()

    t = []
    for w in words:
        node = tagger.parseToNode(w)

        tokens = []
        while node:
            feature_split = node.feature.split(',')

            if feature_split[0] != 'BOS/EOS':
                # When '*' is set as base form, surface will be used instead.
                base_form = node.surface if feature_split[6] == '*' else feature_split[6]
                tokens.append(base_form)

            node = node.next

        t.append(tokens)

    df['token'] = t
    return df


def _create_code_words(df):
    # Creates code based on moral foundation words.

    # There are moral words which belong to multiple moral foundations.
    df.sort_values(by=['fid'], inplace=True)

    words = df['word'].tolist()
    fids = df['fid'].tolist()

    code = []
    for w, f in zip(words, fids):
        code.append('＊' + f + w)
        code.append(w + '\n')

    return code


def _create_code(df, foundation):
    # Creates code based on moral foundation.

    code = []
    for fid, mf in foundation.items():
        code.append('＊' + mf)
        words = df[df['fid'] == fid]['word'].tolist()

        code.append(
            '( ' + ' or '.join(words) + ' )\n'
        )

    return code


def _write_code(path, code):
    with open(path, mode='w', encoding='shift-jis') as f:
        f.write('\n'.join(code))
        print('{} was created.'.format(path))


def _write_compound(path, compound):
    with open(path, mode='w', encoding='shift-jis') as fc:

        fc.write('---cell---\n'+'\n'.join(compound)+'\n')
        print('{} was created.'.format(path))


def _generate(jmfd_path, exclude_general):
    df, foundation = load_jmfd(jmfd_path)

    if exclude_general:
        # Removes MoralityGeneral.
        del foundation['11']
        df = df[~(df['fid'] == '11')]

    df = _segment(df)
    code_f = _create_code(df, foundation)
    code_w = _create_code_words(df)
    compound = df[df['token'].str.len() > 1]['word'].unique().tolist()

    return code_f, code_w, compound


def generate_khcode(jmfd_path=JMFD_PATH, exclude_general=True, code_jmf=CODE_JMF_PATH,
                    code_jmfw=CODE_JMFW_PATH, compound_jmf=COMPOUND_JMF_PATH):
    """Generates KH coder coding files and compound list file from j-MFD.

    Args:
        jmfd_path (str): Path of J-MFD file.
        exclude_general (bool): Whether to exclude 'MoralityGeneral' in J-MFD.
        code_jmf (str): Path of KH Coder coding file based on moral foundaion.
        code_jmfw (str): Path of KH Coder coding file based on moral foundaion word.
        compound_jmf (str): Path of KH Coder file storing compound word list.
    """
    code_f, code_w, compound = _generate(jmfd_path, exclude_general)
    _write_code(code_jmf, code_f)
    _write_code(code_jmfw, code_w)
    _write_compound(compound_jmf, compound)
